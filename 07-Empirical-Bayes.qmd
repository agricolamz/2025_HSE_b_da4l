---
editor_options: 
  chunk_output_type: console
---

# Эмпирическая байесовская оценка

```{r setup07}
#| include: false
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
theme_set(theme_bw())
```

```{r}
library(tidyverse)
```


Метод эмпирической байесовской оценки (Empirical Bayes estimation) --- один из байесовских методов, в рамках которого:

- производят оценку априорного распределения вероятностей на основании имеющихся данных
- используют полученное априорное распределение для получение апостериорной оценки для каждого наблюдения

Рассмотрим пример данных из статьи [@daniel19], в которой аннализировались интервью с людьми из деревени Михалёвская и исследовался ряд консервативных и инновативных  черт в их речи.

```{r}
mikhalevskaja <- read_csv("https://raw.githubusercontent.com/agricolamz/2024_HSE_b_da4l/master/data/ustya_data.csv")
glimpse(mikhalevskaja)
```

Представим себе, что мы решили задаться целью найти наиболее диалектных носителей:

```{r}
#| fig-height: 9
#| fig-width: 11

library(tidytext)
mikhalevskaja |> 
  mutate(ratio = conservative/total,
         speaker = reorder_within(speaker, ratio, feature)) |> 
  ggplot(aes(ratio, speaker, color = gender))+
  geom_point()+
  facet_wrap(~feature, scales = "free")+
  scale_y_reordered()
```

Не очень легко это анализировать... Давайте выберем один признак -- подъем a: консервативными считались формы [ꞌpʲetʲero], а инновативной -- реализация [ꞌpʲatʲərə]. Посчитаем долю и отсортируем:

```{r}
mikhalevskaja |> 
  filter(feature == "a-e") |> 
  mutate(ratio = conservative/total) |> 
  arrange(desc(ratio))
```

В целом, всего в интервью встречается от 4 до 244 контекстов для реализации признака. Хотим ли мы верить, что lpp1928 с 29 наблюдениями диалектнее, чем mgb1949 с 104 наблюдениями, только на основании доли?

```{r}
mikhalevskaja |> 
  filter(feature  == "a-e") |> 
  mutate(ratio = conservative/total) |> 
  ggplot(aes(ratio))+
  geom_histogram()+
  xlim(-0.1, 1)
```

Мы можем провести байесовский апдейт, но для этого нам нужно априорное распределение. Трюк, который предлагает байесовская эмпирическая оценка заключается в том, что априорное распределение можно попробовать получить на основании данных:

```{r}
#| message: false

mikhalevskaja |> 
  filter(feature == "a-e") |> 
  mutate(ratio = conservative/total) |> 
  filter(ratio != 0, # оказывается fitdist плохо работает, когда много крайних точек
         ratio != 1) ->
  for_beta_estimation 
  
beta_est <- fitdistrplus::fitdist(for_beta_estimation$ratio, distr = 'beta', method = 'mle')
beta_est
```

Сделаем байесовский апдейт:

```{r}
mikhalevskaja |> 
  filter(feature == "a-e") |> 
  mutate(alpha_prior = beta_est$estimate[1],
         beta_prior = beta_est$estimate[2],
         alpha_post = conservative+alpha_prior,
         beta_post  = innovative+beta_prior,
         mean_post = alpha_post/(alpha_post+beta_post),
         ratio = conservative/total) |> 
  ggplot(aes(ratio, mean_post, label = speaker, color = total))+
  geom_hline(yintercept = beta_est$estimate[1]/sum(beta_est$estimate), linetype = 2)+
  geom_point()+
  ggrepel::geom_text_repel()
```

Как видно, байесовская оценка не сильно отличается от старой оценки средним, однако таким образом мы можем видеть, что после байесовского апдейта наблюдения с маленьким количеством наблюдений льнут к среднему априорного распределения. Мы можем даже умножить параметры нашего априорного распределения на 10, чтобы показать это:

```{r}
mikhalevskaja |> 
  filter(feature == "a-e") |> 
  mutate(alpha_prior = beta_est$estimate[1]*10,
         beta_prior = beta_est$estimate[2]*10,
         alpha_post = conservative+alpha_prior,
         beta_post  = innovative+beta_prior,
         mean_post = alpha_post/(alpha_post+beta_post),
         ratio = conservative/total) |> 
  ggplot(aes(ratio, mean_post, label = speaker, color = total))+
  geom_hline(yintercept = beta_est$estimate[1]/sum(beta_est$estimate), linetype = 2)+
  geom_point()+
  ggrepel::geom_text_repel()
```

```{r}
mikhalevskaja |> 
  filter(feature == "a-e") |> 
  mutate(alpha_prior = beta_est$estimate[1]*40,
         beta_prior = beta_est$estimate[2]*40,
         alpha_post = conservative+alpha_prior,
         beta_post  = innovative+beta_prior,
         mean_post = alpha_post/(alpha_post+beta_post),
         ratio = conservative/total) |> 
  ggplot(aes(ratio, mean_post, label = speaker, color = total))+
  geom_hline(yintercept = beta_est$estimate[1]/sum(beta_est$estimate), linetype = 2)+
  geom_point()+
  ggrepel::geom_text_repel()
```

Или в формате гифки:

![](images/empirical_bayes.gif)

::: {.callout-note}
В работе [@coretta2016] собраны [данные](https://raw.githubusercontent.com/agricolamz/2022_da4l/master/data/Coretta_2017_icelandic.csv) длительности исландских гласных. Используя алгоритм максимального правдоподобия и идеи эмперической байесовской оценки, найдите априорное распределение для длительности гласных (переменная `vowel.dur`), используя все наблюдения в датасете и моделируя его нормальным распределением. Дальше проведите байесовский апдейт длительности гласных носителя `tt01` (переменная `speaker`) и нарисуйте 80% доверительный интервал апостериорного распределения.
:::

```{r}
#| echo: false
#| message: false

read_csv("https://raw.githubusercontent.com/agricolamz/2022_da4l/master/data/Coretta_2017_icelandic.csv") ->
  vowels

beta_est <- fitdistrplus::fitdist(vowels$vowel.dur, distr = 'norm', method = 'mle')

vowels |> 
  filter(speaker == "tt01") ->
  vowels_tt01

sd_prior <- beta_est$estimate[2]
sd_data <- sd(vowels_tt01$vowel.dur)
sd_post <- 1/sqrt(1/sd_prior^2 + 1/sd_data^2)
mean_prior <- beta_est$estimate[1]
mean_data <- mean(vowels_tt01$vowel.dur)
mean_post <- weighted.mean(c(mean_prior, mean_data), c(1/sd_prior^2, 1/sd_data^2))

cred_int_l_80 <- qnorm(0.1, mean_post, sd_post)
cred_int_h_80 <- qnorm(0.9, mean_post, sd_post)

vowels_tt01 |> 
  ggplot(aes(vowel.dur)) +
  geom_histogram(aes(y = after_stat(density)), fill = "grey")+
  stat_function(fun = dnorm, args = list(mean_prior,  sd_prior), color = "lightblue")+
  stat_function(fun = dnorm, args = list(mean_post,  sd_post), color = "red")+
  annotate(geom = "errorbar", y = 0, xmin = cred_int_l_80, xmax = cred_int_h_80, width = 0.001, linewidth = 2)+
  annotate(geom = "text", y = 0.001, x = mean_post, label = "80% credible interval")
```

